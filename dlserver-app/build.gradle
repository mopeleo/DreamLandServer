configurations {
    mybatisGenerator
}

dependencies {
  compile project(":dlserver-api")
  compile project(":dlbase")
  compile(
	  "mysql:mysql-connector-java:5.1.44",
      "com.alibaba:druid:1.1.5",
      "org.springframework:spring-orm:$springVersion",
      "org.springframework:spring-tx:$springVersion",
//      "org.springframework:spring-test:$springVersion",
      "org.springframework.data:spring-data-redis:1.8.3.RELEASE",
      "redis.clients:jedis:2.9.0",
      "com.alibaba:fastjson:1.2.32",
      "commons-codec:commons-codec:1.4",
      "org.mybatis:mybatis:$mybatisVersion",
      "org.mybatis:mybatis-spring:1.3.0"
  )

  mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.5'
  mybatisGenerator 'tk.mybatis:mapper:3.3.9'
}

def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/jdbc-prod.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties
}

task mybatisGenerate << {
    def properties = getDbProperties()
    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = properties.getProperty("jdbc.driver")
    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
    ant.properties['userId'] = properties.getProperty("jdbc.username")
    ant.properties['password'] = properties.getProperty("jdbc.password")
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = this.modelPackage
    ant.properties['mapperPackage'] = this.mapperPackage
    ant.properties['sqlMapperPackage'] = this.sqlMapperPackage
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true, configfile: 'db/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}